<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.employ.employment.mapper.JobInfoMapper">

    <!-- 增 [G] -->
<!--  jobId, status, deliverNum, approveStatus-->
    <insert id="add">
        insert into
        job_info (compId, jobName, jobType, jobKind, status, relDate, jobAddress, jobCon,jobDeadline,deliverNum,salary)
        values (#{compId}, #{jobName}, #{jobType}, #{jobKind}, #{status}, now(), #{jobAddress}, #{jobCon}, #{jobDeadline}, #{deliverNum}, #{salary})
    </insert>

    <!-- 删 -->
    <delete id="delete">
        delete from job_info
        where jobId = #{jobId}
    </delete>

    <!-- 改 [G] -->
    <update id="update">
        update job_info
        <trim prefix="set" suffixOverrides=",">
            <if test="compId != null">compId = #{compId},</if>
<!--            <if test="compName != null">compName = #{compName},</if>-->
            <if test="jobName != null">jobName = #{jobName},</if>
            <if test="jobType != null">jobType = #{jobType},</if>
            <if test="jobKind != null">jobKind = #{jobKind},</if>
            <if test="status != null">status = #{status},</if>
            <if test="jobAddress != null">jobAddress = #{jobAddress},</if>
            <if test="jobCon != null">jobCon = #{jobCon},</if>
            <if test="jobDeadline != null">jobDeadline = #{jobDeadline}, </if>
            <if test="deliverNum != null">deliverNum = #{deliverNum}, </if>
            <if test="salary != null">salary = #{salary}, </if>
            <if test="approveStatus != null">approveStatus = #{approveStatus},</if>
        </trim>
        where jobId = #{jobId}

    </update>

    <!-- ================================== 查询相关 ================================== -->
    <!-- select jobId, compId, jobName, jobType, jobKind, status, relDate, jobAddress, jobCon,jobDeadline,deliverNum, salary, approveStatus from job_info  -->

    <!-- 通用映射：手动模式 -->
    <resultMap id="model" type="com.employ.employment.entity.JobInfo">
        <result property="jobId" column="jobId" />
        <result property="compId" column="compId" />
        <result property="jobName" column="jobName" />
        <result property="jobType" column="jobType" />
        <result property="jobKind" column="jobKind" />
        <result property="status" column="status" />
        <result property="relDate" column="relDate" />
        <result property="jobAddress" column="jobAddress" />
        <result property="jobCon" column="jobCon" />
        <result property="jobDeadline" column="jobDeadline" />
        <result property="deliverNum" column="deliverNum" />
        <result property="salary" column="salary" />
        <result property="approveStatus" column="approveStatus" />
    </resultMap>

    <!-- 公共查询sql片段 -->
    <sql id="select_sql">
        select *
        from job_info
    </sql>

    <!-- 查 - 根据id -->

<!--    <select id="getById" resultMap="model">-->
<!--        <include refid="select_sql"></include>-->
<!--        where jobId = #{jobId}-->
<!--    </select>-->
    <!-- 查 - 根据id -->
    <select id="getById" parameterType="java.util.List" resultType="JobInfo">
        select jobId,`job_info`.compId,compName,jobName,jobType,jobKind,status,relDate,jobAddress,jobCon,jobDeadline,deliverNum,salary,`job_info`.approveStatus
        from `job_info`, `company_info`
        where `job_info`.`jobId` = #{jobId} and `job_info`.compId = `company_info`.compId
    </select>

    <!-- 查集合 - 根据条件（参数为空时代表忽略指定条件） [G] -->
    <!--    没有发布时间relDate-->
<!--    jobId, compId, jobName, jobType, jobKind, status, relDate, jobAddress, jobCon,jobDeadline,deliverNum, salary, approveStatus-->
    <select id="getList" resultMap="model">
        select jobId,`job_info`.compId,compName,jobName,jobType,jobKind,status,relDate,jobAddress,jobCon,jobDeadline,deliverNum,salary,`job_info`.approveStatus
        from `job_info`, `company_info`
        <where>
            <if test=' this.has("jobId") '> and jobId = #{jobId} </if>
            <if test=' this.has("compId") '> and compId = #{compId} </if>
            <if test=' this.has("jobName") '> and jobName = #{jobName} </if>
            <if test=' this.has("jobType") '> and jobType = #{jobType} </if>
            <if test=' this.has("jobKind") '> and jobKind = #{jobKind} </if>
            <if test=' this.has("status") '> and status = #{status} </if>
            <if test=' this.has("jobAddress") '> and jobAddress = #{jobAddress} </if>
            <if test=' this.has("jobCon") '> and jobCon = #{jobCon} </if>
            <if test=' this.has("jobDeadline") '> and jobDeadline = #{jobDeadline} </if>
            <if test=' this.has("deliverNum") '> and deliverNum = #{deliverNum} </if>
            <if test=' this.has("salary") '> and salary = #{salary} </if>
            <if test=' this.has("approveStatus") '> and approveStatus = #{approveStatus} </if>
            and status=1 and `job_info`.compId = `company_info`.compId
        </where>
        order by
        <choose>
            <when test='sortType == 1'> jobId desc </when>
            <when test='sortType == 2'> compId desc </when>
            <when test='sortType == 3'> jobName desc </when>
            <when test='sortType == 4'> jobType desc </when>
            <when test='sortType == 5'> jobKind desc </when>
            <when test='sortType == 6'> status desc </when>
            <when test='sortType == 7'> jobAddress desc </when>
            <when test='sortType == 8'> jobCon desc </when>
            <when test='sortType == 9'> jobDeadline desc </when>
            <when test='sortType == 10'> deliverNum desc </when>
            <when test='sortType == 11'> salary desc </when>
            <when test='sortType == 12'> approveStatus desc </when>
            <otherwise> jobId desc </otherwise>
        </choose>
    </select>

    <select id="selectAllJobByJobIds" parameterType="java.util.List" resultType="JobInfo">
        select jobId,`job_info`.compId,compName,jobName,jobType,jobKind,status,relDate,jobAddress,jobCon,jobDeadline,deliverNum,salary,`job_info`.approveStatus
        from `job_info`, `company_info`
        where `job_info`.`jobId` in
        <foreach collection="jobIds" item="jobId" index="index"
                 open="(" close=")" separator=",">
            #{jobId}
        </foreach>
        and `job_info`.compId = `company_info`.compId
        order by field(
        `jobId`,
        <foreach collection="jobIds" separator="," item="jobId">
            #{jobId}
        </foreach>
        )
    </select>

    <select id="selectJobByJobIds" parameterType="java.util.List" resultType="JobInfo">
        select jobId,`job_info`.compId,compName, jobName,jobType,jobKind,status,relDate,jobAddress,jobCon,jobDeadline,deliverNum,salary,`job_info`.approveStatus
        from `job_info`, `company_info`
        where `job_info`.`jobId` in
        <foreach collection="jobIds" item="jobId" index="index"
                 open="(" close=")" separator=",">
            #{jobId}
        </foreach>
        and `job_info`.approveStatus = 2 and status =1 and `company_info`.compId = `job_info`.compId
        order by
        <choose>
            <when test='sortType == 1'> relDate desc </when>
            <otherwise>
                field(
                `jobId`,
                <foreach collection="jobIds" separator="," item="jobId">
                    #{jobId}
                </foreach>
                )
            </otherwise>
        </choose>
    </select>

    <select id="selectReviewJobs" parameterType="java.util.List" resultType="JobInfo">
        select jobId,`job_info`.compId,compName, jobName,jobType,jobKind,status,relDate,jobAddress,jobCon,jobDeadline,deliverNum,salary,`job_info`.approveStatus
        from `job_info`, `company_info`
        where `job_info`.approveStatus = 1 and status =1 and `company_info`.compId = `job_info`.compId
        order by relDate desc
    </select>
</mapper>
